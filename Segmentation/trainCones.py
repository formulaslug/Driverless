import sys
import os

sys.path.insert(0, 'Yolact_minimal')

import argparse
from coneConfig import ConeTrainingConfig

parser = argparse.ArgumentParser(description='Train YOLACT for Cone Segmentation')
parser.add_argument('--cfg', default='res50_cone', help='Config name (will use res50_cone)')
parser.add_argument('--train_bs', type=int, default=8, help='Training batch size')
parser.add_argument('--img_size', type=int, default=544, help='Image size')
parser.add_argument('--resume', default=None, type=str, help='Resume training from checkpoint')
parser.add_argument('--val_interval', type=int, default=4000, help='Validation interval')
parser.add_argument('--val_num', type=int, default=-1, help='Number of validation images')
parser.add_argument('--local_rank', type=int, default=0, help='Local rank for distributed training')
parser.add_argument('--traditional_nms', action='store_true', help='Use traditional NMS')
parser.add_argument('--coco_api', action='store_true', help='Use COCO API for evaluation')

args = parser.parse_args()

print("="*60)
print("YOLACT Training for Formula Student Cone Segmentation")
print("="*60)
print(f"Dataset: fsoco_segmentation_train")
print(f"Classes: {len(ConeTrainingConfig().classNames)} cone types")
print(f"Annotations file: {ConeTrainingConfig().trainAnn}")
print(f"Batch size: {args.train_bs}")
print(f"Image size: {args.img_size}")
print("="*60)
print()

print("To start training, you need to:")
print("1. Download the ResNet50 backbone weights:")
print("   mkdir -p Yolact_minimal/weights")
print("   wget https://download.pytorch.org/models/resnet50-19c8e357.pth -O Yolact_minimal/weights/backbone_res50.pth")
print()
print("2. Modify Yolact_minimal/config.py to add the cone configuration:")
print("   Add this class after the res50_custom class:")
print()
print("class res50_cone(res101_coco):")
print("    def __init__(self, args):")
print("        super().__init__(args)")
print("        self.class_names = ('seg_orange_cone', 'seg_yellow_cone', 'seg_large_orange_cone', 'seg_blue_cone', 'seg_unknown_cone')")
print("        self.num_classes = len(self.class_names) + 1")
print("        self.continuous_id = {(aa + 1): (aa + 1) for aa in range(self.num_classes - 1)}")
print("        if self.mode == 'train':")
print("            self.weight = args.resume if args.resume else 'weights/backbone_res50.pth'")
print("        else:")
print("            self.weight = args.weight")
print()
print("        if self.mode == 'train':")
print("            self.train_imgs = 'Data/fsoco_segmentation_train/'")
print("            self.train_ann = 'Data/fsoco_segmentation_train/train_coco.json'")
print("            self.warmup_until = 500")
print("            self.lr_steps = (0, 40000, 60000, 70000, 80000)")
print()
print("        if self.mode in ('train', 'val'):")
print("            self.val_imgs = 'Data/fsoco_segmentation_train/'")
print("            self.val_ann = 'Data/fsoco_segmentation_train/train_coco.json'")
print()
print("3. Run training with:")
print("   cd Yolact_minimal")
print("   python train.py --cfg res50_cone --train_bs 8 --img_size 544")
print()
